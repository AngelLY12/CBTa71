---
interface Props {
  data: {
    labels: string[];
    ganancias: number[];
    pendientes: number[];
    estudiantes: number[];
  };
}

const { data } = Astro.props;

const width = 400;
const height = 180;
const padding = 20;

const maxY = Math.max(...data.ganancias, ...data.pendientes, ...data.estudiantes) * 1.2;
const scaleY = (value: number) => height - padding - (value / maxY) * (height - 2 * padding);
const scaleX = (index: number) => padding + (index / (data.labels.length - 1)) * (width - 2 * padding);

const generateLinePath = (values: number[]) => {
  return values.map((value, i) => `${scaleX(i)},${scaleY(value)}`).join('L');
};

const pathGanancias = generateLinePath(data.ganancias);
const pathPendientes = generateLinePath(data.pendientes);
const pathEstudiantes = generateLinePath(data.estudiantes);
---
<div class="flex justify-between items-center mb-4">
  <h2 class="text-xl font-bold text-gray-800">MÃ©tricas</h2>
  <div class="flex gap-4 text-sm text-gray-600">
    <div class="flex items-center">
      <span class="w-3 h-3 rounded-full bg-green-500 mr-2"></span> Ganancias
    </div>
    <div class="flex items-center">
      <span class="w-3 h-3 rounded-full bg-purple-500 mr-2"></span> Pendientes
    </div>
    <div class="flex items-center">
      <span class="w-3 h-3 rounded-full bg-red-500 mr-2"></span> Estudiantes
    </div>
  </div>
</div>

<svg class="w-full h-auto" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio="xMidYMid meet">
  {Array.from({ length: 5 }).map((_, i) => {
    const y = padding + (i / 4) * (height - 2 * padding);
    return <line x1={padding} y1={y} x2={width - padding} y2={y} stroke="#e0e0e0" stroke-dasharray="2 2" />;
  })}

  <polyline
    fill="none"
    stroke="#22c55e"
    stroke-width="2"
    points={pathGanancias}
  />
  {data.ganancias.map((value, i) => (
    <circle cx={scaleX(i)} cy={scaleY(value)} r="3" fill="#22c55e" />
  ))}

  <polyline
    fill="none"
    stroke="#a855f7"
    stroke-width="2"
    points={pathPendientes}
  />
  {data.pendientes.map((value, i) => (
    <circle cx={scaleX(i)} cy={scaleY(value)} r="3" fill="#a855f7" />
  ))}

  <polyline
    fill="none"
    stroke="#ef4444"
    stroke-width="2"
    points={pathEstudiantes}
  />
  {data.estudiantes.map((value, i) => (
    <circle cx={scaleX(i)} cy={scaleY(value)} r="3" fill="#ef4444" />
  ))}

  {data.labels.map((label, i) => (
    <text
      x={scaleX(i)}
      y={height - padding / 2}
      text-anchor="middle"
      font-size="10"
      fill="#6b7280"
    >
      {label}
    </text>
  ))}
</svg>